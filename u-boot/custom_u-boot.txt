NOTE: booting from original firmware does not seem to work with newer u-boot versions.


# CLEAR DEFAULT U-BOOT environment
=> env default -a
## Resetting to default environment
setenv autoload
setenv bootcmd
setenv bootdelay
setenv bootenv
setenv console
setenv importbootenv
setenv loadaddr
setenv loadbootenv
setenv mtdparts
setenv nandloadimage
setenv nandroot
setenv nandrootfstype
setenv setbootargs
setenv setnandbootenv
setenv subbootcmd
##
=> printenv
baudrate=115200
stderr=serial
stdin=serial
stdout=serial

Environment size: 66/131068 bytes

# Set multiboot environment:
############################

setenv archNumber '3800'
setenv mainlineLinux 'yes'
setenv stderr 'serial'
setenv stdin 'serial'
setenv stdout 'serial'
setenv bootdelay '3'
setenv mtdparts_ubi  'mtdparts=orion_nand:896k(u-boot),128k(u-boot-env),-(rootmtd)'
setenv mtdparts_orig 'mtdparts=nand_mtd:0xc0000@0(uboot)ro,0x7f00000@0x100000(root)'
setenv mtdparts      'mtdparts=orion_nand:1024k(u-boot),5120k(uImage),5120k(ramdisk),104448k(image),10240k(mini firmware),5120k(config)'
setenv autoload 'no'
setenv sata_dma_mode 'yes'
setenv CASset 'min'
setenv MALLOC_len '1'
setenv loads_echo '0'
setenv disaMvPnp 'no'
setenv disL2Cache 'no'
setenv disL2Prefetch 'yes'
setenv setL2CacheWT 'yes'
setenv enaAutoRecovery 'yes'
setenv enaCpuStream 'no'
setenv enaDCPref 'yes'
setenv enaICPref 'yes'
setenv enaMonExt 'no'
setenv enaWrAllo 'no'
setenv nandEcc '1bit'
setenv netbsd_en 'no'
setenv usb0Mode 'host'
setenv vxworks_en 'no'
setenv pexMode 'RC'
setenv ethact 'egiga0'

# substitute with your MAC address on the sticker located on bottom of the NAS
setenv ethaddr 'C8:BE:19:03:46:4E'

setenv ethmtu '1500'
setenv ethprime 'egiga0'

# substitute with the NAS IP ADDRESS/MASK
setenv ipaddr '192.168.0.100'
setenv netmask '255.255.255.0'

# substitute with an IP ADDRESS in your NETWORK for use with NETCONSOLE
setenv serverip '192.168.0.250'

setenv netretry 'no'
setenv console 'ttyS0,115200'
setenv bootargs_end ':::DB88FXX81:eth0:none'

setenv bootopts ''
setenv uImageAddr '0xa00000'
setenv uInitramfsAddr '0xf00000'
setenv uInitrdAddr '0xf00000'

setenv usb_root 'LABEL=rootusb'
setenv usb_opts 'usb-storage.delay_use=0 rootdelay=10'
setenv usb_load_uImage 'ext2load usb 0:1 ${uImageAddr} /boot/uImage-xusb'
setenv usb_load_uInitramfs 'ext2load usb 0:1 ${uInitramfsAddr} /boot/uInitramfs'
setenv usb_setbootargs 'setenv bootargs console=${console} root=${usb_root} ${usb_opts} ${mtdparts} ${bootargs_end} ${bootopts}'
setenv boot_from_usb 'usb reset; if run usb_load_uImage && run usb_load_uInitramfs; then run usb_setbootargs; bootm ${uImageAddr} ${uInitramfsAddr}; fi'

setenv hdd_root 'LABEL=roothdd'
setenv hdd_opts ''
setenv hdd_load_uImage 'ext2load ide 0:1 ${uImageAddr} /uImage-xhdd'
setenv hdd_load_uInitramfs 'ext2load ide 0:1 ${uInitramfsAddr} /uInitramfs'
setenv hdd_setbootargs 'setenv bootargs console=${console} root=${hdd_root} ${hdd_opts} ${mtdparts} ${bootargs_end} ${bootopts}'
setenv boot_from_hdd 'ide reset; if run hdd_load_uImage && run hdd_load_uInitramfs; then run hdd_setbootargs; bootm ${uImageAddr} ${uInitramfsAddr}; fi'

setenv netconsole 'disabled'
setenv start_netconsole 'setenv ncip $serverip; setenv bootdelay 10; setenv stdin nc; setenv stdout nc; setenv stderr nc; version;'
setenv netconsole_test 'if test $netconsole = "enabled"; then if ping $serverip; then run start_netconsole; fi; fi'



setenv nand_boot_format 'orig'
setenv nand_set_for_ubi  'setenv mtdparts $mtdparts_ubi'
setenv nand_set_for_orig 'setenv mtdparts $mtdparts_orig; setenv mainlineLinux no; setenv -f archNumber; setenv bootargs_end :::DB88FXX81:egiga0:none'

setenv nand_ubi_part 'rootmtd'
setenv nand_ubi_fs 'rootmtd'
setenv nand_ubi_opts 'ubi.mtd=2 rootfstype=ubifs'
setenv nand_ubi_load_uImage 'ubifsload ${uImageAddr} /boot/uImage'
setenv nand_ubi_load_uInitramfs 'ubifsload ${uInitramfsAddr} /boot/uInitramfs'
setenv nand_ubi_setbootargs 'setenv bootargs console=${console} root=${nand_ubi_fs} ${nand_ubi_opts} ${mtdparts} ${bootargs_end} ${bootopts}'
setenv boot_from_nand_ubi 'ubi part ${nand_ubi_part}; ubifsmount ubi0:${ubi_fs}; if run nand_ubi_load_uImage && run nand_ubi_load_uInitramfs; then run nand_ubi_setbootargs; bootm ${uImageAddr} ${uInitramfsAddr}; fi'

setenv nand_setbootargs 'setenv bootargs root=/dev/ram console=ttyS0,115200 :::DB88FXX81:egiga0:none'
setenv boot_from_nand 'run nand_setbootargs; nand read.e 0xa00000 0x100000 0x300000;nand read.e 0xf00000 0x600000 0x300000;bootm 0xa00000 0xf00000'

setenv nand_orig_load_uImage 'nand read.e ${uImageAddr} 0x100000 0x300000'
setenv nand_orig_load_uInitrd 'nand read.e ${uInitrdAddr} 0x600000 0x300000'
setenv nand_orig_setbootargs 'setenv bootargs root=/dev/ram console=${console} ${mtdparts} ${bootargs_end} ${bootopts}'
setenv boot_from_nand_orig 'run nand_set_for_orig; if run nand_orig_load_uImage && run nand_orig_load_uInitrd; then run nand_orig_setbootargs; bootm ${uImageAddr} ${uInitrdAddr}; fi'


setenv bootcmd 'run boot_from_usb; run boot_from_hdd; run netconsole_test; if test $nand_boot_format = "orig"; then run boot_from_nand_orig; fi; if test $nand_boot_format = "ubi"; then run boot_from_nand_ubi; fi'



###########
saveenv


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

PLEASE PAY REALLY ATTENTION IF YOU USE PREBOOT COMMAND,
 YOU RISK TO BRICK THE DEVICE, even if you have serial console
 access, you will need JTAG access to unbrick

# (If you don't understand the risks, JUST DON'T USE IT) # setenv preboot 'run if_netconsole start_netconsole'

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


