
***************************************************
USE THE "vars.txt" commands to prepare the environment variables we will use.
USE THE "crosscompile.txt" instructions to prepare the build toolchain
***************************************************

##################################################
# Introduction
##################################################

The reason behind a custom kernel is to reduce memory footprint 
(by not compiling not needed features) and to incluse some very nifty 
feature like Bluetooth/WIFI/Sound Support/etc.


One special feature will be "OverlayFS": this will allow to mount a volume
in read-only while keeping the modified files "in-ram".
I strongly wanted this feature to protect the NAND while doing my tests as the
number of writes the NAND cells can support before dying is limited.

In the end, I actually ended up using just the HDD and letting the NAND alone.
So this feature actually is not so needed, but I learned a lot of the boot process
while implementing it, so I share it anyway.




##################################################
# Download and prepare Kernel Sources (OverlayFS)
##################################################

OverlayFS is not yet supported in mainline kernel, but it is going to be accepted in the future.
So we must use Torvald's kernel tree, together with the OverlayFS patches.

If you prefer not to use OverlayFS at all, you can use kernel.org sources instead, 
just go to the "CONFIGURE KERNEL" section.


mkdir -p ${KERNELWORKDIR}
cd ${KERNELWORKDIR}

Configure GIT environment
git config --global user.name "Davide Del Grande"
git config --global user.email "delgrande.davide@gmail.com"


First we download Torvald's tree
This will take time... it's approx. 1.5GB
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git $KERNELCURRENT

cd $KERNELCURRENT

Enumerate latest available tags/branches (we will use the tag name in the rebase command later)
git for-each-ref refs/tags --sort=-taggerdate --format='%(refname)' --count=10
	refs/tags/v3.13
	refs/tags/v3.13-rc8
	refs/tags/v3.13-rc7
	refs/tags/v3.13-rc6
	refs/tags/v3.13-rc5
	refs/tags/v3.13-rc4
	refs/tags/v3.13-rc3
	refs/tags/v3.13-rc2
	refs/tags/v3.13-rc1
	refs/tags/v3.12



Add a new git source for the OverlayFS code:


git remote add overlayfs git://git.kernel.org/pub/scm/linux/kernel/git/mszeredi/vfs.git
git fetch overlayfs

v19 is meant for kernel tree v3.11
v20 is meant for kernel tree v3.12
v21 is meant for kernel tree v3.13


I successfully tried versions v3.10/v18 v3.11/v19 and v3.13/v21
I could not get it to work with v3.14


Now we will create a new branch based on v3.13/v21
git checkout -b v3.13+overlayfs.v21 overlayfs/overlayfs.v21
	Branch v3.13+overlayfs.v21 set up to track remote branch overlayfs.v21 from overlayfs.
	Switched to a new branch 'v3.13+overlayfs.v21'


Now apply the Torvald's tree back to OverlayFS tree
	
git rebase v3.13
	First, rewinding head to replay your work on top of it...
	Applying: vfs: add i_op->dentry_open()
	Applying: vfs: export do_splice_direct() to modules
	Applying: vfs: export __inode_permission() to modules
	Applying: vfs: introduce clone_private_mount()
	Applying: overlay filesystem
	Applying: overlayfs: add statfs support
	Applying: overlayfs: implement show_options
	Applying: overlay: overlay filesystem documentation
	Applying: fs: limit filesystem stacking depth


Commit our local git branch
git add *
git commit -m "Added OverlayFS support"
"
# On branch v3.13+overlayfs.v21
# Your branch and 'overlayfs/overlayfs.v21' have diverged,
# and have 222 and 9 different commits each, respectively.
#
nothing to commit (working directory clean)


If you later want to update to newer kernels, just do (inside kernel tree):
make distclean
git fetch origin
git fetch overlayfs

and you can do a checkout, for example:
git checkout -b v3.14+overlayfs.v22 overlayfs/overlayfs.v22



##################################################
# CONFIGURE KERNEL
##################################################

This will apply:
	Kirkwood default config
	enable a DTB-appended kernel to work even with stock U-Boot (which is not able to pass DTB structure).
	Reduce Kernel Size not compiling unused stuff, optional.
	Include some extra features (like sound, wifi, etc.), these are optional.


The 1st section is mandatory for the very minimal working of the NAS.
Feel free to explore and add/remove features at your preference.



## Prep tree
cd $KERNELWORKDIR/$KERNELCURRENT
make distclean && make mrproper


### CONFIG:

cat arch/arm/configs/kirkwood_defconfig - <<EOF > .config
### MIMINAL HARDWARE CONFIG FOR DLINK-DNS325
# System Type
CONFIG_MACH_DLINK_KIRKWOOD_DT=y
USE_OF=y
CONFIG_SERIAL_OF_PLATFORM=y
# DTB-appended kernel for stock U-Boot
CONFIG_ARM_APPENDED_DTB=y
CONFIG_ARM_ATAG_DTB_COMPAT_CMDLINE_FROM_BOOTLOADER=y
CONFIG_ARM_ATAG_DTB_COMPAT=y
# NSA325 has just 512MB ram
CONFIG_HIGHMEM=n
# This is important otherwise you get "__nand_correct_data: uncorrectable ECC error__nand_correct_data: uncorrectable ECC error"
CONFIG_MTD_BLOCK=n
# sensors support
CONFIG_I2C_GPIO=y
CONFIG_I2C_MV64XXX=y
CONFIG_HWMON=y
CONFIG_SENSORS_GPIO_FAN=y
CONFIG_SENSORS_LM75=y
# Ethernet
CONFIG_MV643XX_ETH=y
# USB
CONFIG_USB_SUPPORT=y
CONFIG_USB=y
CONFIG_USB_EHCI_HCD=y
CONFIG_USB_EHCI_HCD_ORION=y
# initramfs support (to be able to use root=LABEL=)
CONFIG_TMPFS=y
CONFIG_BLK_DEV_INITRD=y
# NetConsole support
CONFIG_NETCONSOLE=m
EOF


cat <<EOF >>.config
# No auto version label
CONFIG_LOCALVERSION_AUTO=n
# /proc/config.gz
CONFIG_IKCONFIG=y
CONFIG_IKCONFIG_PROC=y
# Prepends timings
CONFIG_PRINTK_TIME=y
EOF



cat <<EOF >>.config
# OVERLAYFS SUPPORT
CONFIG_OVERLAYFS_FS=y
CONFIG_TMPFS_XATTR=y
EOF


####
#STOCK U-BOOT COMPATIBILITY FOR CONDITIONAL BOOTING
####
If you decide to keep STOCK U-Boot, you will face the problem that it's nearly
impossible to do conditional boot, because there is no support for IF/test statements.
A workaround for this issue is to make the bootargs BUILTIN in the kernel and 
just IGNORE what the bootloader passes (which will be for original kernel on NAND).


### FOR USB-stick:
cat <<EOF >>.config
CONFIG_CMDLINE="console=ttyS0,115200 root=LABEL=rootusb usb-storage.delay_use=0 rootdelay=10 mtdparts=nand_mtd:0xc0000@0(uboot)ro,0x7f00000@0x100000(root) :::DB88FXX81:egiga0:none"
CONFIG_CMDLINE_FORCE=y
EOF


### FOR HDD:
cat <<EOF >>.config
CONFIG_CMDLINE="console=ttyS0,115200 root=LABEL=roothdd mtdparts=nand_mtd:0xc0000@0(uboot)ro,0x7f00000@0x100000(root) :::DB88FXX81:egiga0:none"
CONFIG_CMDLINE_FORCE=y
EOF


####
# UBI Support
# I no longer use UBIfs, since I preserved the original stock firmware
# on NAND, and just modified stock U-Boot environment to do multiboot (see above)
# But, if you still want it, this is what you need:
####
cat <<EOF >>.config
# UBI support
CONFIG_MTD_UBI=y
CONFIG_UBIFS_FS=y
EOF




# Reduce Kernel size
cat <<EOF >>.config
# Unused archs/machs selected by default kirkwood config
CONFIG_MACH_NET2BIG_V2=n
CONFIG_MACH_NET5BIG_V2=n
CONFIG_MACH_OPENRD_BASE=n
CONFIG_MACH_OPENRD_CLIENT=n
CONFIG_MACH_OPENRD_ULTIMATE=n
CONFIG_MACH_RD88F6192_NAS=n
CONFIG_MACH_RD88F6281=n
CONFIG_MACH_T5325=n
CONFIG_MACH_TS219=n
CONFIG_MACH_TS41X=n
CONFIG_MACH_D2NET_V2=n
CONFIG_MACH_MV88F6281GTW_GE_DT=n
# Unused sensors selected by default kirkwood config
CONFIG_SENSORS_ADT7475=n
CONFIG_SENSORS_LM63=n
CONFIG_SENSORS_LM85=n
## Unused Device Drivers 
CONFIG_BLK_DEV_SR=n
# Device Drivers / LED Support
CONFIG_LEDS_NS2=n
CONFIG_LEDS_NETXBIG=n
# Device Drivers / Real Time Clock
CONFIG_RTC_DRV_RS5C372=n
CONFIG_RTC_DRV_S35390A=n
CONFIG_RTC_DRV_S35390A=n
# Device Drivers / Network device support / Ethernet driver support
# These are not wifi devices
CONFIG_NET_VENDOR_3COM=n
CONFIG_NET_VENDOR_ADAPTEC=n
CONFIG_NET_VENDOR_ALTEON=n
CONFIG_NET_VENDOR_AMD=n
CONFIG_NET_VENDOR_ARC=n
CONFIG_NET_VENDOR_ATHEROS=n
CONFIG_NET_CADENCE=n
CONFIG_NET_VENDOR_BROADCOM=n
CONFIG_NET_VENDOR_BROCADE=n
CONFIG_NET_VENDOR_CHELSIO=n
CONFIG_NET_VENDOR_CIRRUS=n
CONFIG_NET_VENDOR_CISCO=n
CONFIG_NET_VENDOR_DEC=n
CONFIG_NET_VENDOR_DLINK=n
CONFIG_NET_VENDOR_EMULEX=n
CONFIG_NET_VENDOR_EXAR=n
CONFIG_NET_VENDOR_FARADAY=n
CONFIG_NET_VENDOR_HP=n
CONFIG_NET_VENDOR_INTEL=n
CONFIG_NET_VENDOR_MELLANOX=n
CONFIG_NET_VENDOR_MICREL=n
CONFIG_NET_VENDOR_MICROCHIP=n
CONFIG_NET_VENDOR_MYRI=n
CONFIG_NET_VENDOR_NATSEMI=n
CONFIG_NET_VENDOR_NVIDIA=n
CONFIG_NET_VENDOR_OKI=n
CONFIG_NET_PACKET_ENGINE=n
CONFIG_NET_VENDOR_QLOGIC=n
CONFIG_NET_VENDOR_REALTEK=n
CONFIG_NET_VENDOR_RDC=n
CONFIG_NET_VENDOR_SEEQ=n
CONFIG_NET_VENDOR_SILAN=n
CONFIG_NET_VENDOR_SIS=n
CONFIG_NET_VENDOR_SMSC=n
CONFIG_NET_VENDOR_STMICRO=n
CONFIG_NET_VENDOR_SUN=n
CONFIG_NET_VENDOR_TEHUTI=n
CONFIG_NET_VENDOR_TI=n
CONFIG_NET_VENDOR_VIA=n
CONFIG_NET_VENDOR_WIZNET=n
EOF




# SCSI BLOCK LAYER 4
cat <<EOF >>.config
CONFIG_BLK_DEV_BSG=y
EOF

cat <<EOF >>.config
# Disk Partitions
CONFIG_PARTITION_ADVANCED=y
CONFIG_MSDOS_PARTITION=y
CONFIG_EFI_PARTITION=y
CONFIG_LDM_PARTITION=y
CONFIG_MAC_PARTITION=y
# Filesystems support
CONFIG_EXT2_FS=y
CONFIG_EXT3_FS=y
CONFIG_EXT4_FS=y
CONFIG_XFS_FS=m
CONFIG_FUSE_FS=m
CONFIG_MSDOS_FS=m
CONFIG_VFAT_FS=y
CONFIG_NTFS_FS=m
CONFIG_NTFS_RW=y
CONFIG_JFFS2_FS=m
CONFIG_HFS_FS=m
CONFIG_HFSPLUS_FS=y
EOF


cat <<EOF >>.config
# Disk Managers - MD
CONFIG_MD=y
CONFIG_MD_AUTODETECT=y
CONFIG_BLK_DEV_MD=y
CONFIG_MD_LINEAR=y
CONFIG_MD_RAID0=y
CONFIG_MD_RAID1=y
# Disk Managers - LVM
CONFIG_BLK_DEV_DM=y
CONFIG_DM_CRYPT=m
CONFIG_DM_SNAPSHOT=m
CONFIG_DM_THIN_PROVISIONING=m
CONFIG_DM_MIRROR=n
CONFIG_DM_RAID=n
CONFIG_DM_UEVENT=y
EOF


cat <<EOF >>.config
# OpenVPN/IPSEC support
CONFIG_TUN=m
CONFIG_L2TP=m
CONFIG_INET_AH=m
CONFIG_INET_ESP=m
EOF


cat <<EOF >>.config
# Example of a WiFi Dongle: DLINK DWL-G122 rev C1 USB
CONFIG_RT2X00=m
CONFIG_RT73USB=m
EOF


# BLUETOOTH + SOUND SUPPORT
cat <<EOF >>.config
# SOUND SUPPORT
CONFIG_SOUND=m
CONFIG_SND=m
CONFIG_SND_SEQUENCER=m
CONFIG_SND_SEQ_DUMMY=m
CONFIG_SND_HRTIMER=m
CONFIG_SND_SEQ_HRTIMER_DEFAULT=y
CONFIG_SND_DYNAMIC_MINORS=y
CONFIG_SND_MAX_CARDS=4
CONFIG_SND_SUPPORT_OLD_API=y
CONFIG_SND_DRIVERS=y
# BLUETOOTH SUPPORT
CONFIG_BT=m
CONFIG_BT_RFCOMM=m
CONFIG_BT_RFCOMM_TTY=y
CONFIG_BT_BNEP=m
CONFIG_BT_BNEP_MC_FILTER=y
CONFIG_BT_BNEP_PROTO_FILTER=y
CONFIG_BT_HIDP=m
CONFIG_BT_HCIBTUSB=m
CONFIG_BT_HCIBTSDIO=m
CONFIG_BT_HCIUART=m
CONFIG_BT_HCIUART_H4=y
CONFIG_BT_HCIUART_BCSP=y
CONFIG_BT_HCIUART_ATH3K=y
CONFIG_BT_HCIUART_LL=y
CONFIG_BT_HCIUART_3WIRE=y
CONFIG_BT_HCIBCM203X=m
CONFIG_BT_HCIBPA10X=m
CONFIG_BT_HCIBFUSB=m
CONFIG_BT_HCIVHCI=m
CONFIG_BT_MRVL=m
CONFIG_BT_MRVL_SDIO=m
CONFIG_BT_ATH3K=m
# UINPUT for Headsets
CONFIG_INPUT_MISC=y
CONFIG_INPUT_UINPUT=m
EOF



# Further reduce Kernel size
cat <<EOF >>.config
# # Reduce kernel size not compiling unused stuff
# General setup section
CONFIG_PROFILING=n
CONFIG_KPROBES=n
# Kernel Hacking section
CONFIG_DEBUG_KERNEL=n
CONFIG_DEBUG_FS=n
CONFIG_FTRACE=n
CONFIG_UNUSED_SYMBOLS=n
CONFIG_STRIP_ASM_SYMS=y
# Security section
CONFIG_SECURITY=n
CONFIG_SECURITY_SELINUX=n
CONFIG_SECURITY_TOMOYO=n
CONFIG_SECURITY_APPARMOR=n
EOF



# Set labels for configured features in kernel name and filename
# You can you use this to differentiate different builds
LOCALVERSION=""
KERNELSUFFIX=""
UIMAGE_SYMLINK=""


grep "CONFIG_ARM_APPENDED_DTB=y" .config
if [ $? = 0 ]; then
  LOCALVERSION=${LOCALVERSION}+dtb
  KERNELSUFFIX=${KERNELSUFFIX}-dtb
fi

grep "CONFIG_CMDLINE=.*LABEL=roothdd.*" .config
if [ $? = 0 ]; then
  LOCALVERSION=${LOCALVERSION}+xhdd
  KERNELSUFFIX=${KERNELSUFFIX}-xhdd
  UIMAGE_SYMLINK=-xhdd
fi

grep "CONFIG_CMDLINE=.*LABEL=rootusb.*" .config
if [ $? = 0 ]; then
  LOCALVERSION=${LOCALVERSION}+xusb
  KERNELSUFFIX=${KERNELSUFFIX}-xusb
  UIMAGE_SYMLINK=-xusb
fi

grep "CONFIG_OVERLAYFS_FS=y" .config
if [ $? = 0 ]; then
  LOCALVERSION=${LOCALVERSION}+ofs
  KERNELSUFFIX=${KERNELSUFFIX}-ofs
fi


cat <<EOF >>.config
CONFIG_LOCALVERSION="$LOCALVERSION"
EOF



This will bring up the well-known ncurses-based configuration program.
At this stage, you can exit and save and it will be ready.

make menuconfig




##################################################
# COMPILE KERNEL
##################################################


Newer U-boot versions can pass the DTB structure to the kernel directly.
To support the STOCK U-Boot (which can only pass kernel+ramdisk), 
we enable kernel feature CONFIG_ARM_APPENDED_DTB.
So we first produce the zImage, append the DTB structure, and then compile it as uImage.


 (adjust -j for your host - mine has 8 CPUs)
make -j8 zImage modules kirkwood-dns325.dtb

.... lots of compiler/linker output....
.... should end with:
	  LD      arch/arm/boot/compressed/vmlinux
	  OBJCOPY arch/arm/boot/zImage
	  Kernel: arch/arm/boot/zImage is ready



cat arch/arm/boot/dts/kirkwood-dns325.dtb >> arch/arm/boot/zImage
make uImage

	Image Name:   Linux-3.13.0+dtb+xusb+ofs+
	Created:      Mon May 19 22:07:51 2014
	Image Type:   ARM Linux Kernel Image (uncompressed)
	Data Size:    3440475 Bytes = 3359.84 kB = 3.28 MB
	Load Address: 00008000
	Entry Point:  00008000
	  Image arch/arm/boot/uImage is ready



	  
##################################################
# INSTALL KERNEL into ROOTFS tree
# (prepare it with rootfs-hdd.txt or rootfs-nand.txt)
##################################################

cd ${KERNELWORKDIR}/${KERNELCURRENT}

# find current compiled version (Major.Minor)
KERNELVERSION=$(grep -m5 "Linux/arm .* Kernel Configuration" .config | sed 's/.*Linux\/arm \(.*\) Kernel Configuration/\1/g' | cut -d. -f1-2)


# COPY uImage+modules to RootFS for HDD/USB:
cp arch/arm/boot/uImage $RFShdd/boot/uImage-v${KERNELVERSION}${KERNELSUFFIX}
ln -sf uImage-v${KERNELVERSION}${KERNELSUFFIX} $RFShdd/boot/uImage${UIMAGE_SYMLINK}
make INSTALL_MOD_PATH=$RFShdd modules_install

# COPY uImage+modules to RootFS for NAND:
cp arch/arm/boot/uImage $RFSnand/boot/uImage-v${KERNELVERSION}${KERNELSUFFIX}
ln -sf uImage-v${KERNELVERSION}${KERNELSUFFIX} $RFSnand/boot/uImage
make INSTALL_MOD_PATH=$RFSnand modules_install



#######################################################################################################################
## Credits: 
## http://labs.opinsys.com/blog/2012/10/08/building-and-packaging-kernels/#patching-the-kernel-with-overlayfs--la-git
## http://jamie.lentin.co.uk/devices/dlink-dns325/
#######################################################################################################################